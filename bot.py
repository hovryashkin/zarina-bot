import os
from dotenv import load_dotenv
import httpx
from telegram import Update
from telegram.ext import ApplicationBuilder, MessageHandler, filters, ContextTypes
import gspread
from datetime import datetime

# –ó–∞–≥—Ä—É–∑–∫–∞ .env
load_dotenv()
BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
OPENROUTER_API_KEY = os.getenv("OPENROUTER_API_KEY")

# Google Sheets

sheet = gc.open_by_key(os.getenv("GOOGLE_SHEET_ID")).sheet1
gc = gspread.service_account(filename="/etc/secrets/credentials.json")
# –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –≤–æ–ø—Ä–æ—Å–æ–≤
pending_questions = {}

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≤–æ–ø—Ä–æ—Å–∞
def generate_question():
    prompt = (
        "–¢—ã –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –∑–∞–¥–∞–µ—Ç –≤–æ–ø—Ä–æ—Å—ã –¥–µ–≤—É—à–∫–µ, —á—Ç–æ–±—ã –ø–æ–ª—É—á—à–µ –µ–µ —É–∑–Ω–∞—Ç—å. "
        "–ó–∞–¥–∞–π –æ–¥–∏–Ω –∫–æ—Ä–æ—Ç–∫–∏–π, –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π –∏ –ª–∏—á–Ω—ã–π –≤–æ–ø—Ä–æ—Å –Ω–∞ –æ–¥–Ω—É –∏–∑ —Ç–µ–º: "
        "–æ—Ç–Ω–æ—à–µ–Ω–∏—è, —Å–µ–º—å—è, –º–µ—á—Ç—ã, —Å—Ç—Ä–∞—Ö–∏, –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏—è, —á—É–≤—Å—Ç–≤–∞, –¥–µ—Ç—Å—Ç–≤–æ, –±—É–¥—É—â–µ–µ, —Å–∞–º–æ–ø–æ–∑–Ω–∞–Ω–∏–µ. "
        "–∑–∞–¥–∞–≤–∞–π –≤–æ–ø—Ä–æ—Å—ã –∏—Å–∫–ª—é—á—Ç–µ–ª—å–Ω–æ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ –∏ –±–µ–∑ –æ—à–∏–±–æ–∫. "
        "–ë–µ–∑ –ø–æ—è—Å–Ω–µ–Ω–∏–π –∏ —Ñ—Ä–∞–∑ —Ç–∏–ø–∞ '–≤–æ—Ç –≤–æ–ø—Ä–æ—Å'. –¢–æ–ª—å–∫–æ –≤–æ–ø—Ä–æ—Å."
    )

    headers = {
        "Authorization": f"Bearer {OPENROUTER_API_KEY}",
        "Content-Type": "application/json"
    }

    body = {
        "model": "meta-llama/llama-3-70b-instruct",
        "messages": [{"role": "user", "content": prompt}],
        "temperature": 0.9,
        "max_tokens": 50
    }

    response = httpx.post("https://openrouter.ai/api/v1/chat/completions", headers=headers, json=body)

    if response.status_code == 200:
        return response.json()["choices"][0]["message"]["content"].strip()
    else:
        return "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å."

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    user_id_str = str(user.id)
    username = user.username or ""
    name = user.first_name
    now = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    message = update.message.text

    # –ï—Å–ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É–∂–µ –µ—Å—Ç—å –Ω–µ—Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–π –≤–æ–ø—Ä–æ—Å ‚Äî –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –µ–≥–æ + –æ—Ç–≤–µ—Ç
    if user.id in pending_questions:
        question_data = pending_questions.pop(user.id)
        sheet.append_row([
            user_id_str,
            username,
            name,
            question_data["question"],
            message,
            question_data["timestamp"],
            now
        ])

    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å
    question = generate_question()
    question_time = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    pending_questions[user.id] = {
        "question": question,
        "timestamp": question_time
    }

    await update.message.reply_text(question)

# –ó–∞–ø—É—Å–∫
if __name__ == "__main__":
    print("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –∂–¥—ë—Ç —Å–æ–æ–±—â–µ–Ω–∏–π...")

    app = ApplicationBuilder().token(BOT_TOKEN).build()
    app.add_handler(MessageHandler(filters.TEXT & (~filters.COMMAND), handle_message))
    app.run_polling()
