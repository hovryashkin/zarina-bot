import os
import asyncio
import logging
from telegram import Update
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, ContextTypes, filters
from openai import OpenAI
import gspread
from oauth2client.service_account import ServiceAccountCredentials

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–æ–≤
logging.basicConfig(level=logging.INFO)

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –∏–∑ –æ–∫—Ä—É–∂–µ–Ω–∏—è
BOT_TOKEN = os.getenv("BOT_TOKEN")
OPENROUTER_API_KEY = os.getenv("OPENROUTER_API_KEY")
SPREADSHEET_ID = "1hYCwwssr9aTxSUs4atU2IjnaNKaGVoj5UhjvcY2I0xA"

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Google –¢–∞–±–ª–∏—Ü—ã
scope = ['https://spreadsheets.google.com/feeds', 'https://www.googleapis.com/auth/drive']
creds_path = '/etc/secrets/credentials.json'  # –ø—É—Ç—å –Ω–∞ Render
creds = ServiceAccountCredentials.from_json_keyfile_name(
    '/etc/secrets/credentials.json',
    ['https://spreadsheets.google.com/feeds', 'https://www.googleapis.com/auth/drive']
)
client = gspread.authorize(creds)
sheet = client.open_by_key(SPREADSHEET_ID).sheet1

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ OpenRouter (—á–µ—Ä–µ–∑ OpenAI —Å–æ–≤–º–µ—Å—Ç–∏–º—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å)
openai = OpenAI(
    api_key=OPENROUTER_API_KEY,
    base_url="https://openrouter.ai/api/v1"
)

# –•–µ–Ω–¥–ª–µ—Ä —Å—Ç–∞—Ä—Ç–∞
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç, –ó–∞—Ä–∏–Ω–∞ üíñ –Ø —Ö–æ—á—É —É–∑–Ω–∞—Ç—å —Ç–µ–±—è –ø–æ–ª—É—á—à–µ. –ü–æ–µ—Ö–∞–ª–∏!")

    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–µ—Ä–≤–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
    question = await generate_question()
    await update.message.reply_text(question)

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≤–æ–ø—Ä–æ—Å–∞
async def generate_question():
    response = openai.chat.completions.create(
        model="meta-llama/llama-3-70b-instruct",
        messages=[
            {"role": "system", "content": "–¢—ã —Å–æ–∑–¥–∞—ë—à—å –∫–æ—Ä–æ—Ç–∫–∏–µ, –ª–∏—á–Ω—ã–µ –∏ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã –¥–ª—è –¥–µ–≤—É—à–∫–∏, –∫–æ—Ç–æ—Ä–∞—è –æ—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ –Ω–∏—Ö –≤ —Ç–µ–ª–µ–≥—Ä–∞–º-–±–æ—Ç–µ. –ü–∏—à–∏ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ, –±–µ–∑ –æ–±—ä—è—Å–Ω–µ–Ω–∏–π, –ø—Ä–æ—Å—Ç–æ –≤–æ–ø—Ä–æ—Å."},
            {"role": "user", "content": "–ó–∞–¥–∞–π 1 –≤–æ–ø—Ä–æ—Å."}
        ]
    )
    return response.choices[0].message.content.strip()

# –•–µ–Ω–¥–ª–µ—Ä —Å–æ–æ–±—â–µ–Ω–∏–π
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_message = update.message.text
    user_id = update.effective_user.id
    username = update.effective_user.username

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç –≤ Google –¢–∞–±–ª–∏—Ü—É
    sheet.append_row([str(user_id), username, user_message])

    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å
    question = await generate_question()
    await update.message.reply_text(question)

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async def main():
    app = ApplicationBuilder().token(BOT_TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    await app.run_polling()

if __name__ == "__main__":
    asyncio.run(main())
