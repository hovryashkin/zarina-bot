import logging
import os
import time
from dotenv import load_dotenv
import gspread
import openai
from telegram import Update
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    ContextTypes,
    filters,
)

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN")
OPENROUTER_API_KEY = os.getenv("OPENROUTER_API_KEY")
GOOGLE_SHEET_ID = os.getenv("GOOGLE_SHEET_ID")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ OpenRouter API
openai.api_key = OPENROUTER_API_KEY
openai.api_base = "https://openrouter.ai/api/v1"
openai.api_type = "openai"

# –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –≤ Google Sheets
gc = gspread.service_account(filename="/etc/secrets/credentials.json")
sheet = gc.open_by_key(GOOGLE_SHEET_ID).sheet1

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
last_question = {}

async def generate_question() -> str:
    response = openai.ChatCompletion.create(
        model="meta-llama/llama3-70b-instruct",
        messages=[
            {
                "role": "system",
                "content": (
                    "–¢—ã –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –∑–∞–¥–∞–µ—Ç –≤–æ–ø—Ä–æ—Å—ã –¥–µ–≤—É—à–∫–µ, —á—Ç–æ–±—ã –ø–æ–ª—É—á—à–µ –µ–µ —É–∑–Ω–∞—Ç—å. "
                    "–ó–∞–¥–∞–π –æ–¥–∏–Ω –∫–æ—Ä–æ—Ç–∫–∏–π, –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π –∏ –ª–∏—á–Ω—ã–π –≤–æ–ø—Ä–æ—Å –Ω–∞ –æ–¥–Ω—É –∏–∑ —Ç–µ–º: "
                    "–æ—Ç–Ω–æ—à–µ–Ω–∏—è, —Å–µ–º—å—è, –º–µ—á—Ç—ã, —Å—Ç—Ä–∞—Ö–∏, –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏—è, —á—É–≤—Å—Ç–≤–∞, –¥–µ—Ç—Å—Ç–≤–æ, –±—É–¥—É—â–µ–µ, —Å–∞–º–æ–ø–æ–∑–Ω–∞–Ω–∏–µ. "
                    "–∑–∞–¥–∞–≤–∞–π –≤–æ–ø—Ä–æ—Å—ã –∏—Å–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ –∏ –±–µ–∑ –æ—à–∏–±–æ–∫. "
                    "–ë–µ–∑ –ø–æ—è—Å–Ω–µ–Ω–∏–π –∏ —Ñ—Ä–∞–∑ —Ç–∏–ø–∞ '–≤–æ—Ç –≤–æ–ø—Ä–æ—Å'. –¢–æ–ª—å–∫–æ –≤–æ–ø—Ä–æ—Å."
                ),
            },
            {"role": "user", "content": "–ó–∞–¥–∞–π –æ–¥–∏–Ω –≤–æ–ø—Ä–æ—Å."},
        ],
        temperature=0.8,
        max_tokens=60,
    )
    return response.choices[0].message["content"].strip()

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    question = await generate_question()
    last_question[user_id] = question
    await update.message.reply_text(question)

async def handle_response(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    user_id = user.id
    username = user.username or ""
    response = update.message.text.strip()
    question = last_question.get(user_id, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –≤–æ–ø—Ä–æ—Å")

    sheet.append_row([
        str(user_id),
        username,
        question,
        response,
        time.strftime("%Y-%m-%d %H:%M:%S")
    ])

    new_question = await generate_question()
    last_question[user_id] = new_question
    await update.message.reply_text(new_question)

async def main():
    app = ApplicationBuilder().token(BOT_TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_response))

    logging.info("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –∂–¥—ë—Ç —Å–æ–æ–±—â–µ–Ω–∏–π...")
    await app.run_polling()

if __name__ == "__main__":
    import asyncio
    asyncio.run(main())
